          FastFold, folding optimization              *FastFold* *fastfold*

===========================================================================
0. Introduction ~
                                          *FastFold-intro* *fastfold-intro*

Automatic folds - that is, folds generated by a fold method different
from manual - bog down VIM considerably in insert mode. Also, they are often
re-evaluated prematurely for example, when inserting an opening fold marker
whose closing counterpart has yet to be added to complete the fold.

See http://vim.wikia.com/wiki/Keep_folds_closed_while_inserting_text
for a discussion.

With this plug-in, the folds in the currently edited buffer are updated when
certain triggers are met:

- when saving the buffer
- when closing or opening folds (zo, za, zc, etc...)
- when moving or operating fold-wise (zj,zk,[z,]z)
- when typing zuz in normal mode

===========================================================================
1. Commands ~
                                    *FastFold-commands* *fastfold-commands*
                                                          *FastFoldUpdate!*

- :FastFoldUpdate updates all folds in the current buffer.
- :FastFoldUpdate! updates all folds & echoes what fold method was used

- The mapping zuz that invokes :FastFoldUpdate! can be changed to your
  favorite keystroke, say <F5>, by adding
>
    nmap <F5> <Plug>(FastFoldUpdate)
<
  to your .vimrc. It can be disabled by adding
>
    nmap <SID>(DisableFastFoldUpdate) <Plug>(FastFoldUpdate)
<
===========================================================================
2. Config ~
                                        *FastFold-config* *fastfold-config*

Each of the above triggers can be enabled or disabled by setting the
matching global flags in your .vimrc. Default values are shown.
>
  let g:fastfold_savehook = 1
  let g:fastfold_fdmhook = 0
  nmap zuz <Plug>(FastFoldUpdate)
  let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
  let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
<
For example, adding the following lines to your .vimrc
>
  let g:tex_fold_enabled=1
  let g:vimsyn_folding='af'
  let g:xml_syntax_folding = 1
  let g:javaScript_fold = 1
  let g:ruby_fold = 1
  let g:sh_fold_enabled= 7
  let g:php_folding = 1
  let g:perl_fold = 1
<
enables syntax folding for tex, vim, xml, javascript, ruby, shell script and
perl files.

-----------------------------

- All folds are recomputed when you open or close folds by the commands
  zx, zX, za, zA, zo, zO, zc, zC. This list of commands is configured by the
  variable *g:fastfold_fold_command_suffixes* . To intercept all possible fold
  commands (such as zr,zm,...), change it to:
>
  let g:fastfold_fold_command_suffixes =
  ['x','X','a','A','o','O','c','C','r','R','m','M','i','n','N']
<
  or, to disable all interceptions, to:
>
  let g:fastfold_fold_command_suffixes = []
<
- All folds are recomputed when you move or operate fold-wise by
  the commands zj,zk,[z or ]z. This list of commands is configured by
  variable *g:fastfold_fold_movement_commands* . To disable all interceptions,
  change it to:
>
  let g:fastfold_fold_movement_commands = []
<
- FastFold updates all folds when you save a buffer. To disable this hook,
  toggle the default value 1 of the variable *g:fastfold_savehook* by:
>
  let g:fastfold_savehook = 0
<
- FastFold by default only prevents the expression and syntax fold methods
  from recomputing on every buffer change. To prevent all fold methods (except
  manual) from doing so, toggle the default value 0 of *g:fastfold_force* by:
>
  let g:fastfold_force = 1
<
- To intercept every change of the fold method, toggle the default value 0 of
  *g:fastfold_fdmhook* by:
>
  let g:fastfold_fdmhook = 1
<
  It is set to zero by default because it could interfere with other plugins,
  such as vim-easymotion.

- To disable FastFold for certain file types, say taglist, change the default
  empty value [] of the list *g:fastfold_skip_filetypes* to:
>
 let g:fastfold_skip_filetypes = [ 'taglist' ]
<
- FastFold by default only prevents the expression and syntax fold methods
  from recomputing on for files that have more than a certain
  number of lines. To change the default value of 200 of *g:fastfold_minlines*
  to, for example, 0:
>
  let g:fastfold_minlines = 0
<

===========================================================================
3. Extra Notes ~

You can add a visual fold text-object, mapped to iz and az, by
>
  xnoremap iz :<c-u>FastFoldUpdate<cr><esc>:<c-u>normal! ]zv[z<cr>
  xnoremap az :<c-u>FastFoldUpdate<cr><esc>:<c-u>normal! ]zV[z<cr>
<

3.1 Related Plugins ~

FastFold integrates with the plug-in vim-stay available at

  https://github.com/zhimsel/vim-stay

that stores and restores the last folds by :mkview and :loadview.

------------------------------

`FastFold` integrates with the plug-in NrrwRgn available at

  https://github.com/chrisbra/NrrwRgn/
  
that lets you edit a selection in a new temporary buffer by adding to your
vimrc the line
>
  autocmd BufWinEnter * let b:nrrw_aucmd_create = "let w:lastfdm = getwinvar(winnr('#'), 'lastfdm')"
<
--------------------------------

Replace the standard `&foldtext`

- by one that displays the percentage of the number of buffer lines that the
  folded text takes up and indents folds according to their nesting level,
  available at http://www.github.com/Konfekt/FoldText, or
- by one that shows the most pertinent initial text of the fold (including fold
  level and number of lines), availabe at https://github.com/kaile256/vim-foldpeek

3.2 Caveats ~

FastFold overwrites your manual folds when saving the currently edited buffer,
unless

- FastFold is disabled for this filetype by g:fastfold_skip_filetypes, or
- the foldmethod=manual since having entered the buffer.

To ensure that sessions do not override the default fold method of the buffer
file type (by the value manual), set sessionoptions-=folds in your
vimrc. For a thorougher solution, install vim-stay discussed above.

3.3 API ~

The last used fold method by which FastFold updates the folds in the current
buffer can be read off from the window local variable w:lastdfm.

3.4 Thanks go to... ~

- starcraftman for providing this documentation, and
- blueyed, kopischke, sabauma, willywampa, and many others for reporting
issues and suggesting code improvements.

vim:tw=78:ts=2:sts=2:sw=2:ft=help:norl
